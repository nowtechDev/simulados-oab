import { supabase } from '@/integrations/supabase/client';

// Servi√ßos das IAs (coloque seus tokens aqui)
const AI_TOKENS = {
  OPENAI_API_KEY: "sk-seu-token-aqui",
  GEMINI_API_KEY: "seu-token-gemini-aqui",
  CLAUDE_API_KEY: "seu-token-claude-aqui"
};

interface LeiCivil {
  id: number;
  Artigo: string;  // Mai√∫sculo conforme a tabela
  Conte√∫do: string;  // Mai√∫sculo e com acento conforme a tabela
  created_at?: string;
}

interface AIResponse {
  provider: 'openai' | 'gemini' | 'claude';
  response: string;
  success: boolean;
  error?: string;
  executionTime?: number;
}

// Servi√ßo do Supabase (usando a configura√ß√£o j√° existente)
class SupabaseService {
  static async searchLeisCivil(query: string): Promise<LeiCivil[]> {
    try {
      console.log(`üîç Buscando leis para a query: "${query}"`);
      
      const { data, error } = await supabase
        .from('leis_civil' as any) // For√ßar tipo pois a tabela n√£o est√° no schema atual
        .select('*')
        .or(`Artigo.ilike.%${query}%,Conte√∫do.ilike.%${query}%`)
        .limit(10);

      if (error) {
        console.error('‚ùå Erro do Supabase:', error);
        console.log('üí° Provavelmente a tabela leis_civil n√£o existe ainda');
        throw error;
      }

      console.log(`‚úÖ Encontradas ${data?.length || 0} leis na base de dados`);
      
      if (data && data.length > 0) {
        console.log('üìã Leis encontradas:', (data as unknown as LeiCivil[]).map(lei => `${lei.Artigo}`));
      } else {
        console.warn('‚ö†Ô∏è Nenhuma lei encontrada para a query');
      }

      return (data as unknown as LeiCivil[]) || [];
    } catch (error) {
      console.error('üí• Erro ao buscar leis:', error);
      console.log('üîÑ Retornando array vazio - usando dados mock se necess√°rio');
      return [];
    }
  }
}

// Servi√ßo OpenAI
class OpenAIService {
  static async generateResponse(query: string, leis: LeiCivil[]): Promise<string> {
    const context = leis.map(lei => 
      `Artigo ${lei.Artigo}: ${lei.Conte√∫do}`
    ).join('\n\n');

    const prompt = `
Voc√™ √© um assistente jur√≠dico especializado em direito civil brasileiro. 
Responda APENAS com base nas informa√ß√µes fornecidas abaixo do banco de dados.
Se n√£o encontrar informa√ß√£o relevante, diga que n√£o h√° informa√ß√µes suficientes.

PERGUNTA: ${query}

ARTIGOS E LEIS DISPON√çVEIS:
${context}

Resposta baseada exclusivamente nos artigos acima:`;

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${AI_TOKENS.OPENAI_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: "gpt-3.5-turbo",
        messages: [{ role: "user", content: prompt }],
        max_tokens: 500,
        temperature: 0.3,
      }),
    });

    const data = await response.json();
    return data.choices[0]?.message?.content || 'Erro ao gerar resposta.';
  }
}

// Servi√ßo Gemini
class GeminiService {
  static async generateResponse(query: string, leis: LeiCivil[]): Promise<string> {
    const context = leis.map(lei => 
      `Artigo ${lei.Artigo}: ${lei.Conte√∫do}`
    ).join('\n\n');

    const prompt = `
Voc√™ √© um assistente jur√≠dico especializado em direito civil brasileiro. 
Responda APENAS com base nas informa√ß√µes fornecidas abaixo do banco de dados.
Se n√£o encontrar informa√ß√£o relevante, diga que n√£o h√° informa√ß√µes suficientes.

PERGUNTA: ${query}

ARTIGOS E LEIS DISPON√çVEIS:
${context}

Resposta baseada exclusivamente nos artigos acima:`;

    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${AI_TOKENS.GEMINI_API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{ text: prompt }]
        }],
        generationConfig: {
          temperature: 0.3,
          maxOutputTokens: 500,
        }
      }),
    });

    const data = await response.json();
    return data.candidates[0]?.content?.parts[0]?.text || 'Erro ao gerar resposta.';
  }
}

// Servi√ßo Claude
class ClaudeService {
  static async generateResponse(query: string, leis: LeiCivil[]): Promise<string> {
    const context = leis.map(lei => 
      `Artigo ${lei.Artigo}: ${lei.Conte√∫do}`
    ).join('\n\n');

    const prompt = `
Voc√™ √© um assistente jur√≠dico especializado em direito civil brasileiro. 
Responda APENAS com base nas informa√ß√µes fornecidas abaixo do banco de dados.
Se n√£o encontrar informa√ß√£o relevante, diga que n√£o h√° informa√ß√µes suficientes.

PERGUNTA: ${query}

ARTIGOS E LEIS DISPON√çVEIS:
${context}

Responda baseado exclusivamente nos artigos acima:`;

    const response = await fetch('https://api.anthropic.com/v1/messages', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${AI_TOKENS.CLAUDE_API_KEY}`,
        'Content-Type': 'application/json',
        'anthropic-version': '2023-06-01'
      },
      body: JSON.stringify({
        model: "claude-3-sonnet-20240229",
        max_tokens: 500,
        temperature: 0.3,
        messages: [
          { role: "user", content: prompt }
        ],
      }),
    });

    const data = await response.json();
    return data.content[0]?.text || 'Erro ao gerar resposta.';
  }
}

// Servi√ßo principal
class AITestService {
  static async processQuery(query: string): Promise<{
    openai: AIResponse;
    gemini: AIResponse;
    claude: AIResponse;
  }> {
    console.log(`üöÄ Iniciando processamento da query: "${query}"`);
    
    // Buscar dados do Supabase
    const leis = await SupabaseService.searchLeisCivil(query);
    
    console.log(`üìä Total de leis encontradas: ${leis.length}`);
    
    if (leis.length === 0) {
      console.warn('‚ö†Ô∏è Nenhuma lei encontrada - enviando resposta padr√£o para todas as IAs');
      const noDataResponse: AIResponse = {
        provider: 'openai',
        response: 'N√£o foram encontradas informa√ß√µes relevantes na base de dados.',
        success: true
      };
      return {
        openai: { ...noDataResponse, provider: 'openai' },
        gemini: { ...noDataResponse, provider: 'gemini' },
        claude: { ...noDataResponse, provider: 'claude' }
      };
    }

    console.log(`ü§ñ Enviando query para as 3 IAs com ${leis.length} leis como contexto`);
    
    // Processar com todas as IAs
    const results = await Promise.allSettled([
      this.callOpenAI(query, leis),
      this.callGemini(query, leis),
      this.callClaude(query, leis)
    ]);

    console.log(`‚úÖ Processamento conclu√≠do. Resultados:`);
    console.log(`   OpenAI: ${results[0].status}`);
    console.log(`   Gemini: ${results[1].status}`);
    console.log(`   Claude: ${results[2].status}`);

    return {
      openai: results[0].status === 'fulfilled' ? results[0].value : this.createErrorResponse('openai', results[0].reason),
      gemini: results[1].status === 'fulfilled' ? results[1].value : this.createErrorResponse('gemini', results[1].reason),
      claude: results[2].status === 'fulfilled' ? results[2].value : this.createErrorResponse('claude', results[2].reason)
    };
  }

  private static async callOpenAI(query: string, leis: LeiCivil[]): Promise<AIResponse> {
    const startTime = Date.now();
    try {
      console.log(`üü¶ Consultando OpenAI...`);
      const response = await OpenAIService.generateResponse(query, leis);
      const executionTime = Date.now() - startTime;
      console.log(`‚úÖ OpenAI respondeu em ${executionTime}ms`);
      return {
        provider: 'openai',
        response,
        success: true,
        executionTime
      };
    } catch (error) {
      console.error(`‚ùå Erro no OpenAI:`, error);
      return this.createErrorResponse('openai', error);
    }
  }

  private static async callGemini(query: string, leis: LeiCivil[]): Promise<AIResponse> {
    const startTime = Date.now();
    try {
      console.log(`üü¢ Consultando Gemini...`);
      const response = await GeminiService.generateResponse(query, leis);
      const executionTime = Date.now() - startTime;
      console.log(`‚úÖ Gemini respondeu em ${executionTime}ms`);
      return {
        provider: 'gemini',
        response,
        success: true,
        executionTime
      };
    } catch (error) {
      console.error(`‚ùå Erro no Gemini:`, error);
      return this.createErrorResponse('gemini', error);
    }
  }

  private static async callClaude(query: string, leis: LeiCivil[]): Promise<AIResponse> {
    const startTime = Date.now();
    try {
      console.log(`üü£ Consultando Claude...`);
      const response = await ClaudeService.generateResponse(query, leis);
      const executionTime = Date.now() - startTime;
      console.log(`‚úÖ Claude respondeu em ${executionTime}ms`);
      return {
        provider: 'claude',
        response,
        success: true,
        executionTime
      };
    } catch (error) {
      console.error(`‚ùå Erro no Claude:`, error);
      return this.createErrorResponse('claude', error);
    }
  }

  private static createErrorResponse(provider: 'openai' | 'gemini' | 'claude', error: any): AIResponse {
    return {
      provider,
      response: '',
      success: false,
      error: error instanceof Error ? error.message : 'Erro desconhecido'
    };
  }
}

// Handler da API
export default async function handler(req: any, res: any) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { query } = req.body;

    if (!query || typeof query !== 'string') {
      return res.status(400).json({
        error: 'Query √© obrigat√≥ria e deve ser uma string'
      });
    }

    console.log(`üìù Processando pergunta: "${query}"`);
    console.log(`‚è∞ Timestamp: ${new Date().toISOString()}`);
    
    const results = await AITestService.processQuery(query);
    
    console.log(`üì§ Enviando resposta final com ${Object.keys(results).length} resultados de IAs`);
    
    res.json({
      success: true,
      query,
      timestamp: new Date().toISOString(),
      results
    });

  } catch (error) {
    console.error('üí• Erro no handler:', error);
    console.error('Stack trace:', error instanceof Error ? error.stack : 'N/A');
    res.status(500).json({
      error: 'Erro interno do servidor',
      message: error instanceof Error ? error.message : 'Erro desconhecido'
    });
  }
}
