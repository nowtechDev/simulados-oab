import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Layout } from '@/components/Layout';
import ExamTimer from '@/components/simulator/ExamTimer';
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from '@/components/ui/select';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { HelpCircle, RefreshCw, Send, ArrowRight, CheckCircle, XCircle, AlertTriangle, BookOpen, FileText, Sparkles } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { analyzeWithOpenAI } from '@/services/openai';
import ResultadoAvaliacaoView from '@/components/simulador/ResultadoAvaliacaoView';
import QuestionarioSimulado from '@/components/simulados/QuestionarioSimulado';
import { OpenAIAnalysisResult } from '@/types/simulador';
import { simuladoIAService, QuestaoSimulado } from '@/services/simuladoIAService';
import { correcaoIAService, CorrecaoCompleta } from '@/services/correcaoIAService';
import { useSimuladoData } from '@/hooks/useSimuladoData';

type SimuladoQuestion = {
  statement: string;
  questionA: string;
  questionB: string;
  isLoading: boolean;
  respostaA: string;
  respostaB: string;
};

type FeedbackResult = {
  nota: number;
  acertos: string[];
  errosOuAcertosParciais: string[];
  feedbackGeral: string;
  pontosFracos: string[];
};

const SimuladoIA = () => {
  const [areaJuridica, setAreaJuridica] = useState<string>('');
  const [peca, setPeca] = useState<string>('');
  const [pecaPersonalizada, setPecaPersonalizada] = useState<string>('');
  const [assunto, setAssunto] = useState<string>('');
  const [isLoading, setIsLoading] = useState(false);
  const [isGeneratingPeca, setIsGeneratingPeca] = useState(false);
  const [pecaGerada, setPecaGerada] = useState<string>('');
  const [questions, setQuestions] = useState<SimuladoQuestion[]>([]);
  const [questoesIA, setQuestoesIA] = useState<QuestaoSimulado[]>([]);
  const [isCustomPeca, setIsCustomPeca] = useState(false);
  const [showFeedback, setShowFeedback] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [feedback, setFeedback] = useState<FeedbackResult | null>(null);
  const [showNovoSimulado, setShowNovoSimulado] = useState(false);
  const [isGeneratingNovoSimulado, setIsGeneratingNovoSimulado] = useState(false);
  const [userResponse, setUserResponse] = useState('');
  const [isGeneratingQuestions, setIsGeneratingQuestions] = useState(false);
  const [timerStarted, setTimerStarted] = useState(false);
  const [showResultadoAnaliseIA, setShowResultadoAnaliseIA] = useState(false);
  const [analiseCompleta, setAnaliseCompleta] = useState<OpenAIAnalysisResult | null>(null);
  const [showQuestionario, setShowQuestionario] = useState(false);
  const [showCorrecao, setShowCorrecao] = useState(false);
  const [correcaoResultado, setCorrecaoResultado] = useState<CorrecaoCompleta | null>(null);
  const [aiError, setAiError] = useState<string | null>(null);
  const navigate = useNavigate();
  const { toast } = useToast();
  const { segundaFaseAreas } = useSimuladoData();

  // Op√ß√µes de pe√ßas por √°rea
  const pecasPorArea: Record<string, string[]> = {
    'direito-administrativo': [
      'A√ß√£o Ordin√°ria', 'Mandado de Seguran√ßa', 'Contesta√ß√£o', 'Agravo de Instrumento',
      'Apela√ß√£o', 'Recurso Ordin√°rio em MS', 'A√ß√£o Popular', 'A√ß√£o Anulat√≥ria',
      'Apela√ß√£o em MS', 'A√ß√£o Civil P√∫blica', 'A√ß√£o de Responsabilidade Civil',
      'A√ß√£o de Desapropria√ß√£o Indireta'
    ],
    'direito-constitucional': [
      'Mandado de Seguran√ßa', 'A√ß√£o Direta de Inconstitucionalidade (ADI)', 'A√ß√£o Popular',
      'Recurso Ordin√°rio Constitucional', 'Recurso Extraordin√°rio', 'Mandado de Injun√ß√£o Coletivo',
      'A√ß√£o Civil P√∫blica', 'ADPF', 'ADO', 'Habeas Data', 'Recurso Extraordin√°rio em ADI',
      'A√ß√£o Condenat√≥ria', 'Apela√ß√£o em MS', 'Mandado de Seguran√ßa Coletivo', 'Reclama√ß√£o Constitucional'
    ],
    'direito-civil': [
      'Apela√ß√£o', 'Agravo de Instrumento', 'Embargos de Terceiro', 'Contesta√ß√£o',
      'A√ß√£o de Alimentos', 'A√ß√£o de Consigna√ß√£o em Pagamento', 'Recurso Especial',
      'Embargos √† Execu√ß√£o', 'A√ß√£o Indenizat√≥ria', 'R√©plica', 'A√ß√£o de Conhecimento com Tutela',
      'Interdi√ß√£o com Tutela', 'A√ß√£o de Despejo', 'Usucapi√£o Especial Urbano',
      'Declarat√≥ria de Inexist√™ncia de D√©bito', 'Obriga√ß√£o de Fazer', 'Peti√ß√£o Inicial',
      'A√ß√£o Rescis√≥ria', 'Reintegra√ß√£o de Posse'
    ],
    'direito-empresarial': [
      'Agravo de Instrumento', 'A√ß√£o de Execu√ß√£o por Quantia Certa', 'A√ß√£o de Dissolu√ß√£o Parcial',
      'A√ß√£o Renovat√≥ria', 'Habilita√ß√£o de Cr√©ditos Retardat√°ria', 'Impugna√ß√£o √† Rela√ß√£o de Credores',
      'A√ß√£o de Fal√™ncia', 'Contesta√ß√£o', 'A√ß√£o Monit√≥ria', 'Recupera√ß√£o Judicial', 'Apela√ß√£o',
      'Extin√ß√£o das Obriga√ß√µes do Falido', 'Presta√ß√£o de Contas', 'Recurso Especial',
      'A√ß√£o de Restitui√ß√£o', 'A√ß√£o Ordin√°ria', 'Embargos √† Execu√ß√£o', 'Embargos de Terceiro',
      'A√ß√£o Revocat√≥ria', 'Resolu√ß√£o de Sociedade', 'Contesta√ß√£o √† Fal√™ncia', 'A√ß√£o de Cobran√ßa',
      'Desconsidera√ß√£o da PJ', 'Execu√ß√£o de T√≠tulo Judicial', 'Obriga√ß√£o de N√£o Fazer',
      'Cancelamento de Protesto'
    ],
    'direito-penal': [
      'Recurso de Apela√ß√£o ‚Äì Penal', 'Memoriais', 'Recurso em Sentido Estrito (RESE)',
      'Resposta √† Acusa√ß√£o', 'Agravo em Execu√ß√£o', 'Contrarraz√µes de Apela√ß√£o',
      'Relaxamento de Pris√£o', 'Queixa-Crime', 'Revis√£o Criminal', 'Resposta √† Execu√ß√£o'
    ],
    'direito-trabalho': [
      'Contesta√ß√£o', 'Recurso Ordin√°rio', 'Peti√ß√£o Inicial ‚Äì Reclama√ß√£o Trabalhista',
      'A√ß√£o de Consigna√ß√£o em Pagamento', 'Contesta√ß√£o e Reconven√ß√£o', 'Embargos √† Execu√ß√£o Trabalhista'
    ],
    'direito-tributario': [
      'Mandado de Seguran√ßa', 'Recurso de Apela√ß√£o', 'Agravo de Instrumento',
      'Embargos √† Execu√ß√£o Fiscal', 'A√ß√£o de Repeti√ß√£o de Ind√©bito', 'A√ß√£o Anulat√≥ria',
      'Exce√ß√£o de Pr√©-Executividade', 'Declarat√≥ria de Inexist√™ncia de Rela√ß√£o Jur√≠dica',
      'Recurso Inominado', 'A√ß√£o de Consigna√ß√£o em Pagamento', 'Agravo ‚Äì Tribut√°rio',
      'A√ß√£o Declarat√≥ria com Repeti√ß√£o de Ind√©bito'
    ]
  };

  const areaLabels: Record<string, string> = {
    'direito-administrativo': 'Direito Administrativo',
    'direito-constitucional': 'Direito Constitucional',
    'direito-civil': 'Direito Civil',
    'direito-empresarial': 'Direito Empresarial',
    'direito-penal': 'Direito Penal',
    'direito-trabalho': 'Direito do Trabalho',
    'direito-tributario': 'Direito Tribut√°rio'
  };

  const pecasOptions = areaJuridica ? [...pecasPorArea[areaJuridica], 'Outro (especificar)'] : [];

  const handlePecaChange = (value: string) => {
    setPeca(value);
    setIsCustomPeca(value === 'Outro (especificar)');
    if (value !== 'Outro (especificar)') {
      setPecaPersonalizada('');
    }
  };

  const generateSimulado = async () => {
    // Resetar o erro da IA
    setAiError(null);
    
    if (!areaJuridica) {
      toast({
        title: "√Årea necess√°ria",
        description: "Por favor, selecione uma √°rea jur√≠dica",
        variant: "destructive"
      });
      return;
    }

    const selectedPeca = isCustomPeca ? pecaPersonalizada : peca;
    
    if (!selectedPeca) {
      toast({
        title: "Pe√ßa necess√°ria",
        description: "Por favor, selecione ou especifique uma pe√ßa processual",
        variant: "destructive"
      });
      return;
    }

    console.log('üöÄ === INICIANDO GERA√á√ÉO DE SIMULADO ===');
    console.log('üìã Par√¢metros selecionados:', {
      areaJuridica,
      selectedPeca,
      assunto: assunto || 'N√£o especificado'
    });

    setIsLoading(true);
    
    try {
      // Buscar a √°rea correspondente no banco de dados
      const areaEncontrada = segundaFaseAreas.find(area => 
        area.slug === areaJuridica || area.name.toLowerCase().includes(areaJuridica.replace('-', ' '))
      );

      if (!areaEncontrada) {
        console.error('‚ùå √Årea n√£o encontrada:', {
          areaJuridica,
          areasDisponiveis: segundaFaseAreas.map(a => ({ id: a.id, name: a.name, slug: a.slug }))
        });
        throw new Error('√Årea jur√≠dica n√£o encontrada no banco de dados');
      }

      console.log('‚úÖ √Årea encontrada:', {
        id: areaEncontrada.id,
        name: areaEncontrada.name,
        slug: areaEncontrada.slug
      });

      // Usar o servi√ßo de simulado IA para gerar quest√µes
      console.log('ü§ñ Chamando simuladoIAService.gerarSimuladoComIA...');
      
      try {
        const questoesGeradas = await simuladoIAService.gerarSimuladoComIA({
          areaId: areaEncontrada.id,
          pecaProcessual: selectedPeca,
          assunto: assunto || undefined,
          numeroQuestoes: 4
        });

        console.log('üìä Resultado da gera√ß√£o:', {
          questoesGeradas: questoesGeradas.length,
          questoes: questoesGeradas.map(q => ({
            id: q.id,
            tipo: q.tipo,
            numero_questao: q.numero_questao
          }))
        });

        if (questoesGeradas.length === 0) {
          throw new Error('Nenhuma quest√£o foi gerada para os par√¢metros informados');
        }

        setQuestoesIA(questoesGeradas);
        setShowQuestionario(true);
        
        toast({
          title: "Simulado gerado!",
          description: `${questoesGeradas.length} quest√µes foram geradas com sucesso pelo agente IA Civil.`,
        });

        console.log('‚úÖ === SIMULADO GERADO E EXIBIDO COM SUCESSO ===');
      } catch (aiError: any) {
        // Se houver erro espec√≠fico da IA, exibir como erro cr√≠tico
        console.error('‚ùå Erro do agente IA:', aiError);
        setAiError(aiError.message || 'Erro desconhecido do agente IA');
        throw new Error(`Erro do agente IA: ${aiError.message}`);
      }

    } catch (error: any) {
      console.error('‚ùå === ERRO CR√çTICO NA GERA√á√ÉO DO SIMULADO ===');
      console.error('Mensagem do erro:', error.message);
      console.error('Stack trace:', error.stack);
      console.error('Erro completo:', error);
      
      toast({
        title: "Erro na gera√ß√£o do simulado",
        description: error.message || "Ocorreu um erro ao gerar o simulado. Verifique sua conex√£o e tente novamente.",
        variant: "destructive"
      });  
      
      // Garantir que o erro seja armazenado
      if (!aiError) {
        setAiError(error.message || 'Erro desconhecido ao gerar o simulado');
      }
      
      setIsLoading(false);
      return; // N√£o prosseguir com o simulado
    } finally {
      setIsLoading(false);
    }
  };

  const handleSubmitRespostas = async (respostas: Record<string, string>) => {
    setIsSubmitting(true);
    
    try {
      console.log('Iniciando corre√ß√£o com IA Civil Corretor...');
      
      // Usar o servi√ßo de corre√ß√£o IA
      const resultadoCorrecao = await correcaoIAService.corrigirRespostas(questoesIA, respostas);
      
      setCorrecaoResultado(resultadoCorrecao);
      setShowCorrecao(true);
      setShowQuestionario(false);
      
      toast({
        title: "Corre√ß√£o conclu√≠da!",
        description: `Sua nota foi ${resultadoCorrecao.notaGeral.toFixed(1)}/10`,
      });
      
    } catch (error: any) {
      console.error("Erro ao submeter respostas:", error);
      toast({
        title: "Erro na corre√ß√£o",
        description: error.message || "Ocorreu um erro ao corrigir as respostas. Tente novamente.",
        variant: "destructive"
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleVoltarSimulado = () => {
    setShowCorrecao(false);
    setShowQuestionario(true);
  };

  const handleNovoSimulado = () => {
    setShowCorrecao(false);
    setShowFeedback(false);
    setFeedback(null);
    setAnaliseCompleta(null);
    setCorrecaoResultado(null);
    setQuestions([]);
    setQuestoesIA([]);
    setPecaGerada('');
    setUserResponse('');
    setShowQuestionario(false);
  };

  // Se estiver mostrando o question√°rio, renderizar o componente espec√≠fico
  if (showQuestionario) {
    return (
      <Layout>
        <div className="container mx-auto px-6 py-10">
          <QuestionarioSimulado 
            questoes={questoesIA}
            onSubmitRespostas={handleSubmitRespostas}
            isLoading={isSubmitting}
          />
        </div>
      </Layout>
    );
  }

  // Se mostrando feedback, renderizar resultado
  if (showFeedback && feedback) {
    return (
      <Layout>
        <div className="container mx-auto px-6 py-10">
          <div className="space-y-6">
            <Card className="overflow-hidden border-[#F8E6FF]/30 shadow-md">
              <CardHeader className="bg-gradient-to-r from-[#F8E6FF]/50 to-[#F8E6FF]/30 border-b border-[#F8E6FF]/20">
                <CardTitle className="text-[#4F1964] flex items-center">
                  <Sparkles className="h-5 w-5 mr-2" />
                  Resultado da Avalia√ß√£o
                </CardTitle>
              </CardHeader>
              <CardContent className="p-8">
                <div className="text-center mb-8">
                  <div className={`inline-flex items-center justify-center w-36 h-36 rounded-full 
                    ${feedback?.nota >= 7 ? 'bg-green-50 border-green-300' : 
                      feedback?.nota >= 5 ? 'bg-amber-50 border-amber-300' : 
                      'bg-red-50 border-red-300'} 
                    border-4 mb-4 transition-all duration-300`}>
                    <span className={`text-5xl font-bold 
                      ${feedback?.nota >= 7 ? 'text-green-600' : 
                        feedback?.nota >= 5 ? 'text-amber-600' : 
                        'text-red-600'}`}>
                      {feedback?.nota.toFixed(1)}
                    </span>
                  </div>
                  <p className="text-gray-600">Seu desempenho no simulado</p>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
                  <div className="bg-green-50 p-5 rounded-lg border border-green-200 shadow-sm">
                    <h3 className="font-semibold flex items-center gap-2 text-green-800 mb-3">
                      <CheckCircle className="h-5 w-5" />
                      Pontos Fortes
                    </h3>
                    <ul className="space-y-2">
                      {feedback?.acertos.map((acerto, i) => (
                        <li key={i} className="flex items-start gap-2 text-sm text-green-700">
                          <CheckCircle className="h-4 w-4 mt-0.5 flex-shrink-0" />
                          <span>{acerto}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                  
                  <div className="bg-amber-50 p-5 rounded-lg border border-amber-200 shadow-sm">
                    <h3 className="font-semibold flex items-center gap-2 text-amber-800 mb-3">
                      <AlertTriangle className="h-5 w-5" />
                      Pontos para Melhorar
                    </h3>
                    <ul className="space-y-2">
                      {feedback?.errosOuAcertosParciais.map((erro, i) => (
                        <li key={i} className="flex items-start gap-2 text-sm text-amber-700">
                          <AlertTriangle className="h-4 w-4 mt-0.5 flex-shrink-0" />
                          <span>{erro}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                </div>
                
                <div className="bg-[#F8E6FF]/20 p-6 rounded-lg mb-8 border border-[#F8E6FF]/40 shadow-sm">
                  <h3 className="font-semibold text-[#4F1964] mb-3 flex items-center">
                    <Sparkles className="h-5 w-5 mr-2" />
                    Feedback Geral
                  </h3>
                  <p className="text-gray-700 leading-relaxed">{feedback?.feedbackGeral}</p>
                </div>

                <div className="flex gap-4 justify-center">
                  <Button 
                    onClick={handleNovoSimulado}
                    className="bg-gradient-to-r from-[#4F1964] to-[#9b59b6] hover:opacity-90 transition-all duration-200"
                  >
                    <ArrowRight className="h-4 w-4 mr-2" />
                    Novo Simulado
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </Layout>
    );
  }

  // Se mostrando corre√ß√£o IA, renderizar resultado
  if (showCorrecao && correcaoResultado) {
    return (
      <Layout>
        <div className="container mx-auto px-6 py-10">
          <div className="space-y-6">
            <Card className="overflow-hidden border-[#F8E6FF]/30 shadow-md">
              <CardHeader className="bg-gradient-to-r from-[#F8E6FF]/50 to-[#F8E6FF]/30 border-b border-[#F8E6FF]/20">
                <CardTitle className="text-[#4F1964] flex items-center">
                  <Sparkles className="h-5 w-5 mr-2" />
                  Resultado da Corre√ß√£o IA
                </CardTitle>
              </CardHeader>
              <CardContent className="p-8">
                <div className="text-center mb-8">
                  <div className={`inline-flex items-center justify-center w-36 h-36 rounded-full 
                    ${correcaoResultado.notaGeral >= 7 ? 'bg-green-50 border-green-300' : 
                      correcaoResultado.notaGeral >= 5 ? 'bg-amber-50 border-amber-300' : 
                      'bg-red-50 border-red-300'} 
                    border-4 mb-4 transition-all duration-300`}>
                    <span className={`text-5xl font-bold 
                      ${correcaoResultado.notaGeral >= 7 ? 'text-green-600' : 
                        correcaoResultado.notaGeral >= 5 ? 'text-amber-600' : 
                        'text-red-600'}`}>
                      {correcaoResultado.notaGeral.toFixed(1)}
                    </span>
                  </div>
                  <p className="text-gray-600">
                    {correcaoResultado.pontosObtidos.toFixed(1)} de {correcaoResultado.totalPontos} pontos
                  </p>
                </div>
                
                <div className="bg-[#F8E6FF]/20 p-6 rounded-lg mb-8 border border-[#F8E6FF]/40 shadow-sm">
                  <h3 className="font-semibold text-[#4F1964] mb-3 flex items-center">
                    <Sparkles className="h-5 w-5 mr-2" />
                    Feedback Geral
                  </h3>
                  <p className="text-gray-700 leading-relaxed">{correcaoResultado.feedbackGeral}</p>
                </div>

                {/* Detalhamento por quest√£o */}
                <div className="space-y-6">
                  <h3 className="text-lg font-semibold text-[#4F1964]">Corre√ß√£o Detalhada por Quest√£o</h3>
                  
                  {correcaoResultado.resultados.map((resultado, index) => {
                    const questao = questoesIA.find(q => q.id === resultado.questaoId);
                    if (!questao) return null;

                    return (
                      <Card key={resultado.questaoId} className="border-l-4 border-l-[#9b59b6]">
                        <CardHeader>
                          <CardTitle className="text-base flex items-center justify-between">
                            <span>Quest√£o {index + 1}</span>
                            <span className={`px-3 py-1 rounded-full text-sm font-semibold
                              ${resultado.nota >= 3 ? 'bg-green-100 text-green-800' : 
                                resultado.nota >= 1.5 ? 'bg-amber-100 text-amber-800' : 
                                'bg-red-100 text-red-800'}`}>
                              {resultado.nota.toFixed(1)} pontos
                            </span>
                          </CardTitle>
                        </CardHeader>
                        <CardContent className="space-y-4">
                          <div className="bg-gray-50 p-4 rounded-md">
                            <h4 className="font-medium text-gray-800 mb-2">Feedback:</h4>
                            <p className="text-gray-700 text-sm">{resultado.feedbackDetalhado}</p>
                          </div>
                          
                          {resultado.pontosAtendidos.length > 0 && (
                            <div className="bg-green-50 p-4 rounded-md">
                              <h4 className="font-medium text-green-800 mb-2 flex items-center">
                                <CheckCircle className="h-4 w-4 mr-2" />
                                Pontos Atendidos
                              </h4>
                              <ul className="text-sm text-green-700 space-y-1">
                                {resultado.pontosAtendidos.map((ponto, i) => (
                                  <li key={i} className="flex items-start">
                                    <CheckCircle className="h-3 w-3 mt-1 mr-2 flex-shrink-0" />
                                    {ponto}
                                  </li>
                                ))}
                              </ul>
                            </div>
                          )}
                          
                          {resultado.pontosFaltantes.length > 0 && (
                            <div className="bg-red-50 p-4 rounded-md">
                              <h4 className="font-medium text-red-800 mb-2 flex items-center">
                                <XCircle className="h-4 w-4 mr-2" />
                                Pontos N√£o Atendidos
                              </h4>
                              <ul className="text-sm text-red-700 space-y-1">
                                {resultado.pontosFaltantes.map((ponto, i) => (
                                  <li key={i} className="flex items-start">
                                    <XCircle className="h-3 w-3 mt-1 mr-2 flex-shrink-0" />
                                    {ponto}
                                  </li>
                                ))}
                              </ul>
                            </div>
                          )}
                          
                          {resultado.sugestoesMelhoria.length > 0 && (
                            <div className="bg-blue-50 p-4 rounded-md">
                              <h4 className="font-medium text-blue-800 mb-2 flex items-center">
                                <AlertTriangle className="h-4 w-4 mr-2" />
                                Sugest√µes de Melhoria
                              </h4>
                              <ul className="text-sm text-blue-700 space-y-1">
                                {resultado.sugestoesMelhoria.map((sugestao, i) => (
                                  <li key={i} className="flex items-start">
                                    <ArrowRight className="h-3 w-3 mt-1 mr-2 flex-shrink-0" />
                                    {sugestao}
                                  </li>
                                ))}
                              </ul>
                            </div>
                          )}
                        </CardContent>
                      </Card>
                    );
                  })}
                </div>

                <div className="flex gap-4 justify-center mt-8">
                  <Button 
                    onClick={handleNovoSimulado}
                    className="bg-gradient-to-r from-[#4F1964] to-[#9b59b6] hover:opacity-90 transition-all duration-200"
                  >
                    <ArrowRight className="h-4 w-4 mr-2" />
                    Novo Simulado
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </Layout>
    );
  }

  return (
    <Layout>
      <div className="container mx-auto px-6 py-10">
        <div className="max-w-4xl mx-auto">
          <div className="text-center mb-8">
            <span className="bg-[#F8E6FF] px-4 py-1.5 rounded-full text-sm font-medium text-[#4F1964] mb-4 inline-block">
              Prepara√ß√£o Personalizada
            </span>
            <h1 className="text-3xl font-bold text-[#4F1964] mb-4">Simulado da 2¬™ Fase ‚Äì IA</h1>
            <p className="text-gray-600 max-w-2xl mx-auto">
              Gere quest√µes personalizadas para a segunda fase da OAB adaptadas ao seu n√≠vel.
              Escolha a √°rea, tipo de pe√ßa e assunto para um treinamento focado usando intelig√™ncia artificial.
            </p>
          </div>
          
          {/* Mostrar erro da IA se existir */}
          {aiError && (
            <div className="bg-red-50 border border-red-200 rounded-xl p-6 mb-8">
              <h2 className="text-lg font-semibold text-red-700 mb-3 flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                </svg>
                Erro do Agente IA
              </h2>
              <div className="bg-white p-4 rounded-md border border-red-100 mb-4">
                <p className="text-gray-800 whitespace-pre-wrap font-mono text-sm">{aiError}</p>
              </div>
              <p className="text-red-600 text-sm">
                O agente IA n√£o conseguiu gerar o simulado. Por favor, tente novamente com par√¢metros diferentes ou contate o suporte.
              </p>
              <div className="mt-4">
                <Button 
                  variant="outline" 
                  className="text-red-600 border-red-200 hover:bg-red-50"
                  onClick={() => setAiError(null)}
                >
                  Fechar
                </Button>
              </div>
            </div>
          )}
          
          <div className="bg-white p-6 rounded-xl shadow-md mb-8 border border-[#F8E6FF]/30">
            <h2 className="text-lg font-semibold text-[#4F1964] mb-4 flex items-center">
              <Sparkles className="h-5 w-5 mr-2 text-[#9b59b6]" />
              Configure seu Simulado
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6">
              <div className="space-y-2">
                <label className="block text-sm font-medium text-gray-700 flex items-center">
                  <BookOpen className="h-4 w-4 mr-1 text-[#9b59b6]" />
                  √Årea da Prova
                </label>
                <Select value={areaJuridica} onValueChange={setAreaJuridica}>
                  <SelectTrigger className="border-[#F8E6FF]/60 focus:ring-[#4F1964]/20">
                    <SelectValue placeholder="Selecione uma √°rea" />
                  </SelectTrigger>
                  <SelectContent>
                    {Object.entries(areaLabels).map(([key, label]) => (
                      <SelectItem key={key} value={key}>{label}</SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              
              <div className="space-y-2">
                <label className="block text-sm font-medium text-gray-700 flex items-center">
                  <FileText className="h-4 w-4 mr-1 text-[#9b59b6]" />
                  Pe√ßa Processual
                </label>
                <Select 
                  value={peca} 
                  onValueChange={handlePecaChange}
                  disabled={!areaJuridica}
                >
                  <SelectTrigger className="border-[#F8E6FF]/60 focus:ring-[#4F1964]/20">
                    <SelectValue placeholder="Selecione uma pe√ßa" />
                  </SelectTrigger>
                  <SelectContent>
                    {pecasOptions.map((p) => (
                      <SelectItem key={p} value={p}>{p}</SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                
                {isCustomPeca && (
                  <Input
                    className="mt-2 border-[#F8E6FF]/60 focus:ring-[#4F1964]/20"
                    placeholder="Digite o nome da pe√ßa"
                    value={pecaPersonalizada}
                    onChange={(e) => setPecaPersonalizada(e.target.value)}
                  />
                )}
              </div>
              
              <div className="space-y-2">
                <div className="flex items-center space-x-1">
                  <label className="block text-sm font-medium text-gray-700 flex items-center">
                    <Sparkles className="h-4 w-4 mr-1 text-[#9b59b6]" />
                    Assunto (opcional)
                  </label>
                  <TooltipProvider>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <span><HelpCircle className="h-4 w-4 text-gray-400" /></span>
                      </TooltipTrigger>
                      <TooltipContent>
                        <p className="w-[220px] text-sm">
                          Especifique um assunto para direcionar o conte√∫do do simulado.
                          Deixe em branco para um conte√∫do geral sobre a pe√ßa escolhida.
                        </p>
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                </div>
                <Input
                  placeholder="Ex: Contratos, Sucess√µes, etc."
                  value={assunto}
                  onChange={(e) => setAssunto(e.target.value)}
                  className="border-[#F8E6FF]/60 focus:ring-[#4F1964]/20"
                />
              </div>
            </div>
            
            <div className="flex justify-center">
              <Button 
                className="w-full sm:w-auto bg-gradient-to-r from-[#4F1964] to-[#9b59b6] hover:opacity-90 transition-all duration-200 shadow-md"
                onClick={generateSimulado}
                disabled={isLoading}
              >
                {isLoading ? (
                  <span className="flex items-center">
                    <div className="h-4 w-4 border-2 border-t-transparent border-white rounded-full animate-spin mr-2" />
                    Gerando Simulado...
                  </span>
                ) : (
                  <span className="flex items-center">
                    <Sparkles className="h-4 w-4 mr-2" />
                    Gerar Simulado
                  </span>
                )}
              </Button>
            </div>
          </div>
        </div>
      </div>
      
      <div className="fixed top-24 right-8 z-10">
        <ExamTimer initialTime={5 * 60 * 60} isStarted={timerStarted} />
      </div>
    </Layout>
  );
};

export default SimuladoIA;
